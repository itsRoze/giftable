// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                     String         @id @default(cuid())
  name                   String
  email                  String?        @unique
  emailVerified          DateTime?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  birthday               DateTime
  // For Clerk
  authId                 String?        @unique
  friends                Friend[]       @relation("Friendship")
  // Friend Requests user has sent
  sentFriendRequests     Friend[]       @relation("SentFriendRequest")
  // Friend Requests user has received
  receivedFriendRequests Friend[]       @relation("ReceivedFriendRequest")
  // User's personal wishlist for themselves
  wishlist               WishlistItem[]
  // User's gift ideas to their friends
  myGiftIdeas            GiftIdea[]     @relation("GiftIdeaFromUser")
  // User's gift ideas from their friends
  friendsGiftIdeas       GiftIdea[]     @relation("GiftIdeaToUser")
  pronouns               String?
}

model Friend {
  id          String       @id @default(cuid())
  status      FriendStatus
  requester   User         @relation("SentFriendRequest", fields: [requesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requesterId String
  requested   User         @relation("ReceivedFriendRequest", fields: [requestedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requestedId String
  users       User[]       @relation("Friendship")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([requesterId, requestedId])
  @@index([requestedId])
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model WishlistItem {
  id          Int      @id @default(autoincrement())
  name        String
  url         String?
  imageUrl    String?
  description String?  @db.VarChar(300)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model GiftIdea {
  id             Int      @id @default(autoincrement())
  name           String
  url            String?
  imageUrl       String?
  description    String?
  giftFromUser   User     @relation("GiftIdeaFromUser", fields: [giftFromUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  giftFromUserId String
  giftToUser     User     @relation("GiftIdeaToUser", fields: [giftToUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  giftToUserId   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([giftFromUserId])
  @@index([giftToUserId])
}
